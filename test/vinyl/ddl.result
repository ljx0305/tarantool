fiber = require('fiber')
---
...
test_run = require('test_run').new()
---
...
-- space secondary index create
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index1 = space:create_index('primary')
---
...
index2 = space:create_index('secondary')
---
...
space:drop()
---
...
-- space index create hash
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary', {type = 'hash'})
---
- error: Unsupported index type supplied for index 'primary' in space 'test'
...
space:drop()
---
...
-- creation of a new index and altering the definition of an existing
-- index are unsupported for non-empty spaces
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary')
---
...
space:insert({1})
---
- [1]
...
-- fail because of wrong tuple format {1}, but need {1, ...}
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
- error: Vinyl does not support adding an index to a non-empty space
...
space.index.primary:alter({parts = {1, 'unsigned', 2, 'unsigned'}})
---
- error: Vinyl does not support changing the definition of a non-empty index
...
#box.space._index:select({space.id})
---
- 1
...
box.space._index:get{space.id, 0}[6]
---
- [{'field': 0, 'type': 'unsigned'}]
...
space:drop()
---
...
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary')
---
...
space:insert({1, 2})
---
- [1, 2]
...
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
- error: Vinyl does not support adding an index to a non-empty space
...
space.index.primary:alter({parts = {1, 'unsigned', 2, 'unsigned'}})
---
- error: Vinyl does not support changing the definition of a non-empty index
...
#box.space._index:select({space.id})
---
- 1
...
box.space._index:get{space.id, 0}[6]
---
- [{'field': 0, 'type': 'unsigned'}]
...
space:drop()
---
...
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary')
---
...
space:insert({1, 2})
---
- [1, 2]
...
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
- error: Vinyl does not support adding an index to a non-empty space
...
space.index.primary:alter({parts = {1, 'unsigned', 2, 'unsigned'}})
---
- error: Vinyl does not support changing the definition of a non-empty index
...
#box.space._index:select({space.id})
---
- 1
...
box.space._index:get{space.id, 0}[6]
---
- [{'field': 0, 'type': 'unsigned'}]
...
space:delete({1})
---
...
-- must fail because vy_mems have data
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
- error: Vinyl does not support adding an index to a non-empty space
...
space.index.primary:alter({parts = {1, 'unsigned', 2, 'unsigned'}})
---
- error: Vinyl does not support changing the definition of a non-empty index
...
box.snapshot()
---
- ok
...
while space.index.primary:info().rows ~= 0 do fiber.sleep(0.01) end
---
...
-- after a dump REPLACE + DELETE = nothing, so the space is empty now and
-- can be altered.
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
...
space.index.primary:alter({parts = {1, 'unsigned', 2, 'unsigned'}})
---
...
#box.space._index:select({space.id})
---
- 2
...
box.space._index:get{space.id, 0}[6]
---
- [{'field': 0, 'type': 'unsigned'}, {'field': 1, 'type': 'unsigned'}]
...
space:insert({1, 2})
---
- [1, 2]
...
index:select{}
---
- - [1, 2]
...
index2:select{}
---
- - [1, 2]
...
space:drop()
---
...
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
index = space:create_index('primary', { run_count_per_level = 2 })
---
...
space:insert({1, 2})
---
- [1, 2]
...
box.snapshot()
---
- ok
...
space:delete({1})
---
...
box.snapshot()
---
- ok
...
while space.index.primary:info().run_count ~= 2 do fiber.sleep(0.01) end
---
...
-- must fail because vy_runs have data
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
- error: Vinyl does not support adding an index to a non-empty space
...
space.index.primary:alter({parts = {1, 'unsigned', 2, 'unsigned'}})
---
- error: Vinyl does not support changing the definition of a non-empty index
...
-- After compaction the REPLACE + DELETE + DELETE = nothing, so
-- the space is now empty and can be altered.
space:delete({1})
---
...
-- Make sure the run is big enough to trigger compaction.
space:insert({2, 3})
---
- [2, 3]
...
space:delete({2})
---
...
box.snapshot()
---
- ok
...
-- Wait until the dump is finished.
while space.index.primary:info().rows ~= 0 do fiber.sleep(0.01) end
---
...
index2 = space:create_index('secondary', { parts = {2, 'unsigned'} })
---
...
space.index.primary:alter({parts = {1, 'unsigned', 2, 'unsigned'}})
---
...
space:drop()
---
...
--
-- gh-1632: index:bsize()
--
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
pk = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'}  })
---
...
for i=1,10 do box.space.test:replace({i}) end
---
...
box.space.test.index.primary:bsize() > 0
---
- true
...
box.snapshot()
---
- ok
...
while space.index.primary:info().run_count ~= 1 do fiber.sleep(0.01) end
---
...
box.space.test.index.primary:bsize() == 0
---
- true
...
space:drop()
---
...
--
-- gh-1709: need error on altering space
--
space = box.schema.space.create('test', {engine='vinyl'})
---
...
pk = space:create_index('pk', {parts = {1, 'unsigned'}})
---
...
space:auto_increment{1}
---
- [1, 1]
...
space:auto_increment{2}
---
- [2, 2]
...
space:auto_increment{3}
---
- [3, 3]
...
box.space._index:replace{space.id, 0, 'pk', 'tree', {unique=true}, {{0, 'unsigned'}, {1, 'unsigned'}}}
---
- error: Vinyl does not support changing the definition of a non-empty index
...
space:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
space:drop()
---
...
-- Allow to specify various bloom fprs per index.
space = box.schema.space.create('test', {engine='vinyl'})
---
...
pk = space:create_index('pk', {bloom_fpr = 0.1})
---
...
sec = space:create_index('sec', {bloom_fpr = 0.2})
---
...
third = space:create_index('third', {bloom_fpr = 0.3})
---
...
pk.options.bloom_fpr
---
- 0.1
...
sec.options.bloom_fpr
---
- 0.2
...
third.options.bloom_fpr
---
- 0.3
...
space:drop()
---
...
--
-- gh-2109: allow alter some opts of not empty indexes
--
-- Forst, check that we can decrease run_count_per_level and it
-- triggers compaction after next box.snapshot(). Ensure that the
-- runs with different page_sizes and bloom_fprs are compacted
-- correctly.
--
space = box.schema.space.create('test', {engine='vinyl'})
---
...
page_size = 8192
---
...
range_size = 1024 * 1024 * 1024
---
...
bloom_fpr = 0.1
---
...
pk = space:create_index('pk', {run_count_per_level = 10, page_size = page_size, range_size = range_size, bloom_fpr = bloom_fpr})
---
...
pad_size = page_size / 5
---
...
pad = string.rep('I', pad_size)
---
...
-- Create 4 pages with sizes 'page_size'
for i = 1, 20 do space:replace{i, pad} end
---
...
est_bsize = pad_size * 20
---
...
box.snapshot()
---
- ok
...
pk:info().disk.pages
---
- 4
...
space.index.pk.options.page_size
---
- 8192
...
pk:info().run_count
---
- 1
...
space.index.pk.options.bloom_fpr
---
- 0.1
...
-- Change page_size and trigger compaction
page_size = page_size * 2
---
...
bloom_fpr = bloom_fpr * 2
---
...
pk:alter({page_size = page_size, run_count_per_level = 1, bloom_fpr = bloom_fpr})
---
...
pad_size = page_size / 5
---
...
pad = string.rep('I', pad_size)
---
...
-- Create 4 pages with new sizes in new run
for i = 1, 20 do space:replace{i + 20, pad} end
---
...
est_bsize = est_bsize + pad_size * 20
---
...
box.snapshot()
---
- ok
...
-- Wait for compaction
while pk:info().run_count ~= 1 do fiber.sleep(0.01) end
---
...
pk:info().disk.pages
---
- 6
...
space.index.pk.options.page_size
---
- 16384
...
pk:info().run_count
---
- 1
...
space.index.pk.options.bloom_fpr
---
- 0.2
...
est_bsize / page_size == pk:info().disk.pages
---
- true
...
space:drop()
---
...
--
-- Change range size to trigger split.
--
space = box.schema.space.create('test', {engine = 'vinyl'})
---
...
page_size = 64
---
...
range_size = page_size * 15
---
...
pk = space:create_index('pk', {page_size = page_size, range_size = range_size, run_count_per_level = 1})
---
...
pad = ''
---
...
for i = 1, 64 do pad = pad..(i % 10) end
---
...
for i = 1, 8 do space:replace{i, pad} end
---
...
box.snapshot()
---
- ok
...
-- Decrease the range_size and dump many runs to trigger split.
pk:alter({range_size = page_size * 2})
---
...
while pk:info().range_count < 2 do space:replace{1, pad} box.snapshot() fiber.sleep(0.01) end
---
...
space:drop()
---
...
-- gh-2673 vinyl cursor uses already freed VinylIndex and vy_index
s = box.schema.space.create('test', {engine = 'vinyl'})
---
...
i0 = s:create_index('i0', {parts = {1, 'string'}})
---
...
i1 = s:create_index('i1', {unique = false, parts = {2, 'string', 3, 'string', 4, 'string'}})
---
...
i2 = s:create_index('i2', {parts = {2, 'string', 4, 'string', 3, 'string', 1, 'string'}})
---
...
i3 = s:create_index('i3', {parts = {2, 'string', 4, 'string', 6, 'unsigned', 1, 'string'}})
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for j = 1, 60 do
    s:truncate()
    self = {}
    self.end2018 = os.time{year=2018, month=12, day=31, hour=23, min=59, sec=59}
    self.start2019 = os.time{year=2019, month=1, day=1, hour=0, min=0, sec=0}
    self.week1end = os.time{year=2019, month=1, day=6, hour=23, min=59, sec=59}
    self.week2start = os.time{year=2019, month=1, day=7, hour=0, min=0, sec=0}
    local iface1 = s:insert{'id1', 'uid1', 'iid1', 'fid1', {1, 2, 3, 4}, self.end2018}
    local iface2 = s:insert{'id2', 'uid1', 'iid1', 'fid1', {1, 2, 3, 4}, self.start2019}
    local iface3 = s:insert{'id3', 'uid1', 'iid1', 'fid1', {1, 2, 3, 4}, self.week1end}
    local iface4 = s:insert{'id4', 'uid1', 'iid1', 'fid1', {1, 2, 3, 4}, self.week2start}
    local f, ctx, state = s.index.i3:pairs({'uid1', 'fid1', 0x7FFFFFFF}, { iterator='LE' })
    state, tup = f(ctx, state)
    state, tup = f(ctx, state)
end ;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
s:drop()
---
...
-- gh-2342 cursors after death of index
create_iterator = require('utils').create_iterator
---
...
s = box.schema.space.create('test', { engine = 'vinyl' })
---
...
pk = s:create_index('primary', { parts = { 1, 'uint' } })
---
...
sk = s:create_index('sec', { parts = { 2, 'uint' } })
---
...
s:replace{1, 2, 3}
---
- [1, 2, 3]
...
s:replace{4, 5, 6}
---
- [4, 5, 6]
...
s:replace{7, 8, 9}
---
- [7, 8, 9]
...
itr = create_iterator(s, {})
---
...
f, ctx, state = s.index.sec:pairs({5}, { iterator='LE' })
---
...
itr.next()
---
- [1, 2, 3]
...
f(ctx, state)
---
- <iterator state>
- [4, 5, 6]
...
s:drop()
---
...
itr.next()
---
- null
...
f(ctx, state)
---
- null
...
f = nil
---
...
ctx = nil
---
...
state = nil
---
...
itr = nil
---
...
collectgarbage('collect')
---
- 0
...
-- gh-2342 drop space if transaction is in progress
ch = fiber.channel(1)
---
...
s = box.schema.space.create('test', { engine = 'vinyl' })
---
...
pk = s:create_index('primary', { parts = { 1, 'uint' } })
---
...
sk = s:create_index('sec', { parts = { 2, 'uint' } })
---
...
box.begin()
---
...
s:replace({1, 2, 3})
---
- [1, 2, 3]
...
s:replace({4, 5, 6})
---
- [4, 5, 6]
...
s:replace({7, 8, 9})
---
- [7, 8, 9]
...
s:upsert({10, 11, 12}, {})
---
...
_ = fiber.create(function () s:drop() ch:put(true) end)
---
...
box.commit()
---
- error: Transaction has been aborted by conflict
...
ch:get()
---
- true
...
s = box.schema.space.create('test', { engine = 'vinyl' })
---
...
pk = s:create_index('primary', { parts = { 1, 'uint' } })
---
...
sk = s:create_index('sec', { parts = { 2, 'uint' } })
---
...
box.begin()
---
...
s:replace{1, 2, 3}
---
- [1, 2, 3]
...
s:replace{4, 5, 6}
---
- [4, 5, 6]
...
s:replace{7, 8, 9}
---
- [7, 8, 9]
...
_ = fiber.create(function () s:drop() ch:put(true) end)
---
...
ch:get()
---
- true
...
box.commit()
---
- error: Transaction has been aborted by conflict
...
-- check invalid field types
space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
pk = space:create_index('primary')
---
...
index = space:create_index('test', { type = 'tree', parts = { 2, 'nosuchtype' }})
---
- error: 'Wrong index options (field 1): index part: unknown field type'
...
index = space:create_index('test', { type = 'tree', parts = { 2, 'any' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': field type ''any''
    is not supported'
...
index = space:create_index('test', { type = 'tree', parts = { 2, 'array' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': field type ''array''
    is not supported'
...
index = space:create_index('test', { type = 'tree', parts = { 2, 'map' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': field type ''map''
    is not supported'
...
space:drop()
---
...
