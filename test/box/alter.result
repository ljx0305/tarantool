_space = box.space[box.schema.SPACE_ID]
---
...
_index = box.space[box.schema.INDEX_ID]
---
...
ADMIN = 1
---
...
env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd("push filter ', .lsn.: [0-9]+' to ''")
---
- true
...
utils = require('utils')
---
...
EMPTY_MAP = utils.setmap({})
---
...
--
-- Test insertion into a system space - verify that
-- mandatory fields are required.
--
_space:insert{_space.id, ADMIN, 'test', 'memtx', 0, EMPTY_MAP, {}}
---
- error: Duplicate key exists in unique index 'primary' in space '_space'
...
--
-- Bad space id
--
_space:insert{'hello', 'world', 'test', 'memtx', 0, EMPTY_MAP, {}}
---
- error: 'Tuple field 1 type does not match one required by operation: expected unsigned'
...
--
-- Can't create a space which has wrong field count - field_count must be NUM
--
_space:insert{_space.id, ADMIN, 'test', 'world', 0, EMPTY_MAP, {}}
---
- error: Duplicate key exists in unique index 'primary' in space '_space'
...
--
-- There is already a tuple for the system space
--
_space:insert{_space.id, ADMIN, '_space', 'memtx', 0, EMPTY_MAP, {}}
---
- error: Duplicate key exists in unique index 'primary' in space '_space'
...
_space:replace{_space.id, ADMIN, '_space', 'memtx', 0, EMPTY_MAP, {}}
---
- [280, 1, '_space', 'memtx', 0, {}, []]
...
_space:insert{_index.id, ADMIN, '_index', 'memtx', 0, EMPTY_MAP, {}}
---
- error: Duplicate key exists in unique index 'primary' in space '_space'
...
_space:replace{_index.id, ADMIN, '_index', 'memtx', 0, EMPTY_MAP, {}}
---
- [288, 1, '_index', 'memtx', 0, {}, []]
...
--
-- Can't change properties of a space
--
_space:replace{_space.id, ADMIN, '_space', 'memtx', 0, EMPTY_MAP, {}}
---
- [280, 1, '_space', 'memtx', 0, {}, []]
...
--
-- Can't drop a system space
--
_space:delete{_space.id}
---
- error: 'Can''t drop space ''_space'': the space has indexes'
...
_space:delete{_index.id}
---
- error: 'Can''t drop space ''_index'': the space has indexes'
...
--
-- Can't change properties of a space
--
_space:update({_space.id}, {{'-', 1, 1}})
---
- error: Attempt to modify a tuple field which is part of index 'primary' in space
    '_space'
...
_space:update({_space.id}, {{'-', 1, 2}})
---
- error: Attempt to modify a tuple field which is part of index 'primary' in space
    '_space'
...
--
-- Create a space
--
t = _space:auto_increment{ADMIN, 'hello', 'memtx', 0, EMPTY_MAP, {}}
---
...
-- Check that a space exists
space = box.space[t[1]]
---
...
space.id
---
- 341
...
space.field_count
---
- 0
...
space.index[0]
---
- null
...
--
-- check dml - the space has no indexes yet, but must not crash on DML
--
space:select{0}
---
- error: 'No index #0 is defined in space ''hello'''
...
space:insert{0, 0}
---
- error: 'No index #0 is defined in space ''hello'''
...
space:replace{0, 0}
---
- error: 'No index #0 is defined in space ''hello'''
...
space:update({0}, {{'+', 1, 1}})
---
- error: 'No index #0 is defined in space ''hello'''
...
space:delete{0}
---
- error: 'No index #0 is defined in space ''hello'''
...
t = _space:delete{space.id}
---
...
space_deleted = box.space[t[1]]
---
...
space_deleted
---
- null
...
space:replace{0}
---
- error: Space '341' does not exist
...
_index:insert{_space.id, 0, 'primary', 'tree', 1, 1, 0, 'unsigned'}
---
- error: Duplicate key exists in unique index 'primary' in space '_index'
...
_index:replace{_space.id, 0, 'primary', 'tree', 1, 1, 0, 'unsigned'}
---
- [280, 0, 'primary', 'tree', 1, 1, 0, 'unsigned']
...
_index:insert{_index.id, 0, 'primary', 'tree', 1, 2, 0, 'unsigned', 1, 'unsigned'}
---
- error: Duplicate key exists in unique index 'primary' in space '_index'
...
_index:replace{_index.id, 0, 'primary', 'tree', 1, 2, 0, 'unsigned', 1, 'unsigned'}
---
- [288, 0, 'primary', 'tree', 1, 2, 0, 'unsigned', 1, 'unsigned']
...
-- access_sysview.test changes output of _index:select{}.
-- let's change _index space in such a way that it will be
-- uniformn weather access_sysview.test is completed of not.
box.space._space.index.owner:alter{parts = {2, 'unsigned'}}
---
...
box.space._vspace.index.owner:alter{parts = {2, 'unsigned'}}
---
...
_index:select{}
---
- - [272, 0, 'primary', 'tree', {'unique': true}, [[0, 'string']]]
  - [276, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [276, 1, 'name', 'tree', {'unique': true}, [[1, 'string']]]
  - [280, 0, 'primary', 'tree', 1, 1, 0, 'unsigned']
  - [280, 1, 'owner', 'tree', {'unique': false}, [{'field': 1, 'type': 'unsigned'}]]
  - [280, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [281, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [281, 1, 'owner', 'tree', {'unique': false}, [{'field': 1, 'type': 'unsigned'}]]
  - [281, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [284, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [284, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [284, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [285, 0, 'primary', 'hash', {'unique': true}, [[0, 'unsigned']]]
  - [288, 0, 'primary', 'tree', 1, 2, 0, 'unsigned', 1, 'unsigned']
  - [288, 2, 'name', 'tree', {'unique': true}, [[0, 'unsigned'], [2, 'string']]]
  - [289, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned'], [1, 'unsigned']]]
  - [289, 2, 'name', 'tree', {'unique': true}, [[0, 'unsigned'], [2, 'string']]]
  - [296, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [296, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [296, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [297, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [297, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [297, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [304, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [304, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [304, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [305, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [305, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [305, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [312, 0, 'primary', 'tree', {'unique': true}, [[1, 'unsigned'], [2, 'string'],
      [3, 'unsigned']]]
  - [312, 1, 'owner', 'tree', {'unique': false}, [[0, 'unsigned']]]
  - [312, 2, 'object', 'tree', {'unique': false}, [[2, 'string'], [3, 'unsigned']]]
  - [313, 0, 'primary', 'tree', {'unique': true}, [[1, 'unsigned'], [2, 'string'],
      [3, 'unsigned']]]
  - [313, 1, 'owner', 'tree', {'unique': false}, [[0, 'unsigned']]]
  - [313, 2, 'object', 'tree', {'unique': false}, [[2, 'string'], [3, 'unsigned']]]
  - [320, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [320, 1, 'uuid', 'tree', {'unique': true}, [[1, 'string']]]
  - [330, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [340, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [340, 1, 'sequence', 'tree', {'unique': false}, [[1, 'unsigned']]]
...
-- modify indexes of a system space
_index:delete{_index.id, 0}
---
- error: Can't drop the primary key in a system space, space '_index'
...
_space:insert{1000, ADMIN, 'hello', 'memtx', 0, EMPTY_MAP, {}}
---
- [1000, 1, 'hello', 'memtx', 0, {}, []]
...
_index:insert{1000, 0, 'primary', 'tree', 1, 1, 0, 'unsigned'}
---
- [1000, 0, 'primary', 'tree', 1, 1, 0, 'unsigned']
...
box.space[1000]:insert{0, 'hello, world'}
---
- [0, 'hello, world']
...
box.space[1000]:drop()
---
...
box.space[1000]
---
- null
...
-- test that after disabling triggers on system spaces we still can
-- get a correct snapshot
_index:run_triggers(false)
---
...
_space:run_triggers(false)
---
...
box.snapshot()
---
- ok
...
test_run:cmd("restart server default with cleanup=1")
utils = require('utils')
---
...
EMPTY_MAP = utils.setmap({})
---
...
ADMIN = 1
---
...
box.space['_space']:insert{1000, ADMIN, 'test', 'memtx', 0, EMPTY_MAP, {}}
---
- [1000, 1, 'test', 'memtx', 0, {}, []]
...
box.space[1000].id
---
- 1000
...
box.space['_space']:delete{1000}
---
- [1000, 1, 'test', 'memtx', 0, {}, []]
...
box.space[1000]
---
- null
...
--------------------------------------------------------------------------------
-- #197: box.space.space0:len() returns an error if there is no index
--------------------------------------------------------------------------------
space = box.schema.space.create('gh197')
---
...
space:len()
---
- 0
...
space:truncate()
---
...
space:pairs():totable()
---
- []
...
space:drop()
---
...
--------------------------------------------------------------------------------
-- #198: names like '' and 'x.y' and 5 and 'primary ' are legal
--------------------------------------------------------------------------------
-- invalid identifiers
box.schema.space.create('invalid.identifier')
---
- error: Invalid identifier 'invalid.identifier' (expected letters, digits or an underscore)
...
box.schema.space.create('invalid identifier')
---
- error: Invalid identifier 'invalid identifier' (expected letters, digits or an underscore)
...
box.schema.space.create('primary ')
---
- error: Invalid identifier 'primary ' (expected letters, digits or an underscore)
...
box.schema.space.create('5')
---
- error: Invalid identifier '5' (expected letters, digits or an underscore)
...
box.schema.space.create('')
---
- error: Invalid identifier '' (expected letters, digits or an underscore)
...
-- valid identifiers
box.schema.space.create('_Abcde'):drop()
---
...
box.schema.space.create('_5'):drop()
---
...
box.schema.space.create('valid_identifier'):drop()
---
...
-- some OS-es ship incomplete locales, breaking ID validation
weird_chars=''
---
...
if jit.os~='OSX' and jit.os~='BSD' then weird_chars='空間' end
---
...
box.schema.space.create('ынтыпрайзный_'..weird_chars):drop() -- unicode
---
...
box.schema.space.create('utf8_наше_Фсё'):drop() -- unicode
---
...
space = box.schema.space.create('test')
---
...
-- invalid identifiers
space:create_index('invalid.identifier')
---
- error: Invalid identifier 'invalid.identifier' (expected letters, digits or an underscore)
...
space:create_index('invalid identifier')
---
- error: Invalid identifier 'invalid identifier' (expected letters, digits or an underscore)
...
space:create_index('primary ')
---
- error: Invalid identifier 'primary ' (expected letters, digits or an underscore)
...
space:create_index('5')
---
- error: Invalid identifier '5' (expected letters, digits or an underscore)
...
space:create_index('')
---
- error: Invalid identifier '' (expected letters, digits or an underscore)
...
space:drop()
---
...
-- gh-57 Confusing error message when trying to create space with a
-- duplicate id
auto = box.schema.space.create('auto_original')
---
...
box.schema.space.create('auto', {id = auto.id})
---
- error: Duplicate key exists in unique index 'primary' in space '_space'
...
box.schema.space.drop('auto')
---
- error: Illegal parameters, space_id should be a number
...
box.schema.space.create('auto_original', {id = auto.id})
---
- error: Space 'auto_original' already exists
...
auto:drop()
---
...
-- ------------------------------------------------------------------
-- gh-281 Crash after rename + replace + delete with multi-part index
-- ------------------------------------------------------------------
s = box.schema.space.create('space')
---
...
index = s:create_index('primary', {unique = true, parts = {1, 'unsigned', 2, 'string'}})
---
...
s:insert{1, 'a'}
---
- [1, 'a']
...
box.space.space.index.primary:rename('secondary')
---
...
box.space.space:replace{1,'The rain in Spain'}
---
- [1, 'The rain in Spain']
...
box.space.space:delete{1,'The rain in Spain'}
---
- [1, 'The rain in Spain']
...
box.space.space:select{}
---
- - [1, 'a']
...
s:drop()
---
...
-- ------------------------------------------------------------------
-- gh-362 Appropriate error messages in create_index
-- ------------------------------------------------------------------
s = box.schema.space.create(42)
---
- error: Illegal parameters, name should be a string
...
s = box.schema.space.create("test", "bug")
---
- error: Illegal parameters, options should be a table
...
s = box.schema.space.create("test", {unknown = 'param'})
---
- error: Illegal parameters, unexpected option 'unknown'
...
s = box.schema.space.create("test")
---
...
index = s:create_index('primary', {unique = true, parts = {0, 'unsigned', 1, 'string'}})
---
- error: 'Illegal parameters, invalid index parts: field_no must be one-based'
...
index = s:create_index('primary', {unique = true, parts = {'unsigned', 1, 'string', 2}})
---
- error: 'Illegal parameters, options.parts: expected field_no (number), type (string)
    pairs'
...
index = s:create_index('primary', {unique = true, parts = 'bug'})
---
- error: Illegal parameters, options parameter 'parts' should be of type table
...
index = s:create_index('test', {unique = true, parts = {1, 'unsigned'}, mmap = true})
---
- error: Illegal parameters, unexpected option 'mmap'
...
s:drop()
---
...
-- ------------------------------------------------------------------
-- gh-155 Tarantool failure on simultaneous space:drop()
-- ------------------------------------------------------------------
test_run:cmd("setopt delimiter ';'")
---
- true
...
local fiber = require('fiber')
local W = 4
local N = 50
local ch = fiber.channel(W)
for i=1,W do
    fiber.create(function()
        for k=1,N do
            local space_id = math.random(2147483647)
            local space = box.schema.space.create(string.format('space_%d', space_id))
            space:create_index('pk', { type = 'tree' })
            space:drop()
        end
        ch:put(true)
    end)
end
for i=1,W do
    ch:get()
end
test_run:cmd("setopt delimiter ''");
---
...
-- ------------------------------------------------------------------
-- Lower and upper cases
-- ------------------------------------------------------------------
space = box.schema.space.create("test")
---
...
_ = space:create_index('primary', { parts = {1, 'nUmBeR', 2, 'StRinG'}})
---
...
space.index.primary.parts[1].type == 'number'
---
- true
...
space.index.primary.parts[2].type == 'string'
---
- true
...
box.space._index:get({space.id, 0})[6]
---
- [{'field': 0, 'type': 'number'}, {'field': 1, 'type': 'string'}]
...
space:drop()
---
...
-- ------------------------------------------------------------------
-- Aliases
-- ------------------------------------------------------------------
space = box.schema.space.create("test")
---
...
_ = space:create_index('primary', { parts = {1, 'uint', 2, 'int', 3, 'str'}})
---
...
space.index.primary.parts[1].type == 'unsigned'
---
- true
...
space.index.primary.parts[2].type == 'integer'
---
- true
...
space.index.primary.parts[3].type == 'string'
---
- true
...
box.space._index:get({space.id, 0})[6]
---
- [{'field': 0, 'type': 'unsigned'}, {'field': 1, 'type': 'integer'}, {'field': 2,
    'type': 'string'}]
...
space:drop()
---
...
-- ------------------------------------------------------------------
-- Tarantool 1.6 compatibility
-- ------------------------------------------------------------------
-- gh-1534: deprecate 'num' data type for unsigned integers
space = box.schema.space.create("test")
---
...
_ = space:create_index('primary', { parts = {1, 'num'}})
---
...
space.index.primary.parts[1].type == 'unsigned'
---
- true
...
box.space._index:get({space.id, 0})[6]
---
- [{'field': 0, 'type': 'unsigned'}]
...
space:drop()
---
...
-- data dictionary compatibility is checked by upgrade.test.lua
test_run:cmd("clear filter")
---
- true
...
--
-- create_index() does not modify index options
--
s = box.schema.space.create('test', {engine='vinyl'})
---
...
opts = {parts={1, 'unsigned'}}
---
...
_ = s:create_index('pk', opts)
---
...
opts
---
- parts:
  - 1
  - unsigned
...
s:drop()
---
...
--
-- gh-2074: alter a primary key
--
s = box.schema.space.create('test')
---
...
_ = s:create_index('pk')
---
...
s:insert{1, 1}
---
- [1, 1]
...
s:insert{2, 2}
---
- [2, 2]
...
s:insert{3, 3}
---
- [3, 3]
...
s.index.pk:alter({parts={1, 'num', 2, 'num'}})
---
...
s.index.pk
---
- unique: true
  parts:
  - type: unsigned
    fieldno: 1
  - type: unsigned
    fieldno: 2
  id: 0
  space_id: 731
  name: pk
  type: TREE
...
s:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
_ = s:create_index('secondary', {parts={2, 'num'}})
---
...
s.index.pk:alter({parts={1, 'num'}})
---
...
s:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
s.index.pk
---
- unique: true
  parts:
  - type: unsigned
    fieldno: 1
  id: 0
  space_id: 731
  name: pk
  type: TREE
...
s.index.secondary
---
- unique: true
  parts:
  - type: unsigned
    fieldno: 2
  id: 1
  space_id: 731
  name: secondary
  type: TREE
...
s.index.secondary:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
s:drop()
---
...
--
-- Forbid explicit space id 0.
--
s = box.schema.create_space('test', { id = 0 })
---
- error: 'Failed to create space ''test'': space id 0 is reserved'
...
--
-- gh-2660 space:truncate() does not preserve table triggers
--
ts = box.schema.space.create('test')
---
...
ti = ts:create_index('primary')
---
...
ts:insert{1, 'b', 'c'}
---
- [1, 'b', 'c']
...
ts:insert{2, 'b', 'c'}
---
- [2, 'b', 'c']
...
o = nil
---
...
n = nil
---
...
function save_out(told, tnew) o = told n = tnew end
---
...
_ = ts:on_replace(save_out)
---
...
ts:replace{2, 'a', 'b', 'c'}
---
- [2, 'a', 'b', 'c']
...
o
---
- [2, 'b', 'c']
...
n
---
- [2, 'a', 'b', 'c']
...
ts:truncate()
---
...
ts:replace{2, 'a', 'b'}
---
- [2, 'a', 'b']
...
o
---
- null
...
n
---
- [2, 'a', 'b']
...
ts:replace{3, 'a', 'b'}
---
- [3, 'a', 'b']
...
o
---
- null
...
n
---
- [3, 'a', 'b']
...
ts:drop()
---
...
--
-- gh-2652: validate space format.
--
s = box.schema.space.create('test', { format = "format" })
---
- error: Illegal parameters, options parameter 'format' should be of type table
...
s = box.schema.space.create('test', { format = { "not_map" } })
---
- error: 'Failed to create space ''test'': field 1 is not map'
...
format = { utils.setmap({'unsigned'}) }
---
...
s = box.schema.space.create('test', { format = format })
---
- error: 'Failed to create space ''test'': field 1 format is not map with string keys'
...
format = { { name = 100 } }
---
...
s = box.schema.space.create('test', { format = format })
---
- error: 'Wrong space format (field 1): ''name'' must be string'
...
long = string.rep('a', box.schema.NAME_MAX + 1)
---
...
format = { { name = long } }
---
...
s = box.schema.space.create('test', { format = format })
---
- error: 'Failed to create space ''test'': field 1 name is too long'
...
format = { { name = 'id', type = '100' } }
---
...
s = box.schema.space.create('test', { format = format })
---
- error: 'Failed to create space ''test'': field 1 has unknown field type'
...
format = { utils.setmap({}) }
---
...
s = box.schema.space.create('test', { format = format })
---
- error: 'Failed to create space ''test'': field 1 name is not specified'
...
-- Ensure the format is updated after index drop.
format = { { name = 'id', type = 'unsigned' } }
---
...
s = box.schema.space.create('test', { format = format })
---
...
pk = s:create_index('pk')
---
...
sk = s:create_index('sk', { parts = { 2, 'string' } })
---
...
s:replace{1, 1}
---
- error: 'Tuple field 2 type does not match one required by operation: expected string'
...
sk:drop()
---
...
s:replace{1, 1}
---
- [1, 1]
...
s:drop()
---
...
-- Check index parts conflicting with space format.
format = { { name='field1', type='unsigned' }, { name='field2', type='string' }, { name='field3', type='scalar' } }
---
...
s = box.schema.space.create('test', { format = format })
---
...
pk = s:create_index('pk')
---
...
sk1 = s:create_index('sk1', { parts = { 2, 'unsigned' } })
---
- error: Ambiguous field type, field 2. Requested type is unsigned but the field has
    previously been defined as string
...
sk2 = s:create_index('sk2', { parts = { 3, 'number' } })
---
- error: Ambiguous field type, field 3. Requested type is number but the field has
    previously been defined as scalar
...
-- Check space format conflicting with index parts.
sk3 = s:create_index('sk3', { parts = { 2, 'string' } })
---
...
format[2].type = 'unsigned'
---
...
s:format(format)
---
- error: Ambiguous field type, field 2. Requested type is string but the field has
    previously been defined as unsigned
...
s:format()
---
- [{'name': 'field1', 'type': 'unsigned'}, {'name': 'field2', 'type': 'string'}, {
    'name': 'field3', 'type': 'scalar'}]
...
s.index.sk3.parts
---
- - type: string
    fieldno: 2
...
-- Space format can be updated, if conflicted index is deleted.
sk3:drop()
---
...
s:format(format)
---
...
s:format()
---
- [{'name': 'field1', 'type': 'unsigned'}, {'name': 'field2', 'type': 'unsigned'},
  {'name': 'field3', 'type': 'scalar'}]
...
-- Check deprecated field types.
format[2].type = 'num'
---
...
format[3].type = 'str'
---
...
format[4] = { name = 'field4', type = '*' }
---
...
format
---
- - name: field1
    type: unsigned
  - name: field2
    type: num
  - name: field3
    type: str
  - name: field4
    type: '*'
...
s:format(format)
---
...
s:format()
---
- [{'name': 'field1', 'type': 'unsigned'}, {'name': 'field2', 'type': 'num'}, {'name': 'field3',
    'type': 'str'}, {'name': 'field4', 'type': '*'}]
...
s:replace{1, 2, '3', {4, 4, 4}}
---
- [1, 2, '3', [4, 4, 4]]
...
-- Check not indexed fields checking.
s:truncate()
---
...
format[2] = {name='field2', type='string'}
---
...
format[3] = {name='field3', type='array'}
---
...
format[4] = {name='field4', type='number'}
---
...
format[5] = {name='field5', type='integer'}
---
...
format[6] = {name='field6', type='scalar'}
---
...
format[7] = {name='field7', type='map'}
---
...
format[8] = {name='field8', type='any'}
---
...
format[9] = {name='field9'}
---
...
s:format(format)
---
...
-- Check incorrect field types.
format[9] = {name='err', type='any'}
---
...
s:format(format)
---
...
s:replace{1, '2', {3, 3}, 4.4, -5, true, {value=7}, 8, 9}
---
- [1, '2', [3, 3], 4.4, -5, true, {'value': 7}, 8, 9]
...
s:replace{1, 2, {3, 3}, 4.4, -5, true, {value=7}, 8, 9}
---
- error: 'Tuple field 2 type does not match one required by operation: expected string'
...
s:replace{1, '2', 3, 4.4, -5, true, {value=7}, 8, 9}
---
- error: 'Tuple field 3 type does not match one required by operation: expected array'
...
s:replace{1, '2', {3, 3}, '4', -5, true, {value=7}, 8, 9}
---
- error: 'Tuple field 4 type does not match one required by operation: expected number'
...
s:replace{1, '2', {3, 3}, 4.4, -5.5, true, {value=7}, 8, 9}
---
- error: 'Tuple field 5 type does not match one required by operation: expected integer'
...
s:replace{1, '2', {3, 3}, 4.4, -5, {6, 6}, {value=7}, 8, 9}
---
- error: 'Tuple field 6 type does not match one required by operation: expected scalar'
...
s:replace{1, '2', {3, 3}, 4.4, -5, true, {7}, 8, 9}
---
- error: 'Tuple field 7 type does not match one required by operation: expected map'
...
s:replace{1, '2', {3, 3}, 4.4, -5, true, {value=7}}
---
- error: Tuple field count 7 is less than required by a defined index (expected 9)
...
s:replace{1, '2', {3, 3}, 4.4, -5, true, {value=7}, 8}
---
- error: Tuple field count 8 is less than required by a defined index (expected 9)
...
s:truncate()
---
...
--
-- gh-1014: field names.
--
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
format[2] = {name = 'field2'}
---
...
format[3] = {name = 'field1'}
---
...
s:format(format)
---
- error: Space field 'field1' is duplicate
...
s:drop()
---
...
